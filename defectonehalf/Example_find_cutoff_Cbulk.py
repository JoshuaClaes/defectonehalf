import os
import pickle
import defectonehalf.DFThalfCutoff as Cutoff
from defectonehalf import VaspWrapperAse

##################################################
# load potcar setup objects
##################################################
"""
set file loc to the location of your pickled potcarsetup object. We assume that we're running vasp in a folder called 
vasp_run. Which we've created inside the folder Cbulk/Cbulk_sp0.25 generated by the Example_bulkCarbon script. This the 
potcar setup object will be on directory higher.
"""
file_loc = '../Cbulk_ps.PotSetup'
with open(file_loc,'rb') as file:
    Cbulk_ps = pickle.load(file)
# set parameters for cluster calculation
Cbulk_ps.workdir = '../' # workdir is Eabs and not Eabs/Nitrogen

##################################################
# Cutoff sweep
##################################################
# INPUT
AtomSelfEnPots = [Cbulk_ps]
PotcarLoc      = ['../POTCAR_C'] # This file needs to be added to Cbulk/Cbulk_sp0.25
is_bulk_calc   = True
# Normally (un)occband should be set but this is not needed for bulk calculations
occband        = None
unoccband      = None
typevasprun    = 'vasp_std'
bulkpotcarloc  = ''
foldervasprun  = os.getcwd() # We run in the current directory
save_eigenval  = True
save_doscar    = False
rb = 0.0
rf = 4.0
nsteps = [9,11] # First sweep between 0 and 4.0 with steps of 0.5, second sweep with step of 0.1 around the maximum
cut_func_par = {'n':8, 'Cutoff' : 0.0} # The cutoff does not matter here
vasp_wrapper    = VaspWrapperAse.VaspWrapperAse() # We use the Ase vasp wrapper.

# CREATE OBJECT
Egap = Cutoff.DFThalfCutoff(AtomSelfEnPots, PotcarLoc, occband, unoccband, is_bulk_calc=is_bulk_calc,
                            typevasprun=typevasprun, bulkpotcarloc=bulkpotcarloc, save_eigenval=save_eigenval,
                            save_doscar=save_doscar, vasp_wrapper=vasp_wrapper)
Egap.foldervasprun = foldervasprun

# RUN SWEEP
# Uncomment the line below to extremise the bandgap after copying this to the right folder.
#Egap.find_cutoff(rb, rf, nsteps, cut_func_par)
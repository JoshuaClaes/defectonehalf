import os
import json
import pandas as pd
import numpy as np
import DFThalf4Vasp

class AtomWrapper:
    def __init__(self):
        # read config file
        path = os.path.dirname(DFThalf4Vasp.__file__)
        with open(path + '/AtomWrapperConfig.json') as json_file:
            self.config = json.load(json_file)
        #print(self.config)

    def run_atom(self, dir):
        cwd = os.getcwd()
        os.chdir(dir)
        os.system(self.config['AtomEx'])
        os.chdir(cwd)
        return 0

    def make_input_file(self, dir, atom, orbitals, occupation, EXtype='ca'):
        """
        Function makes an input file for ATOM
        :string dir: directory for input file
        :string atom: name/symbol of atom
        :param EXtype: Exchange correlation type used in ATOM. ca Ceperley-Alder (best LDA), pb PBE
        :return:
        """
        with open(dir + '/INP','w') as f:
            f.write('#\n# ' + atom +'\n')
            f.write('   ae      '+ atom + '\n') # ae -> tell atom to perform calculation, there rest is a title
            f.write(' n=' + atom + '  c=' +EXtype + '\n')
            f.write('       0.0       0.0       0.0       0.0       0.0       0.0\n')
            f.write('    ' + str(orbitals[0])+ '    ' + str(orbitals[1])+'\n')
            for occ in occupation:
                f.write('    ' + str(occ['n']) + '    ' + str(occ['l']) + '      ' + str(occ['occupation']) + '      0.00' +'\n')
            f.write('100 maxit')
        return 0

    def calc_self_energy(self, radfile, potfile_xi, potfile_zeta, Nrad=None):
        # READ RADII
        radii = self.ReadRadii(radfile, Nrad)

        # READ POTENTIAL OCCUPIED BAND XI
        skiprows = int(np.ceil(Nrad / 4) + 3)  # skip all rows of radii + head of radii (size = 1)
        # + head of potential (size = 2)
        pot_xi = self.read_pot_file(potfile_xi, Nrad, skiprows=skiprows)

        # READ POTENTIAL UNOCCUPIED BANDS ZETA
        pot_zeta = self.read_pot_file(potfile_zeta, Nrad, skiprows=skiprows)

    def read_pot_file(self, file, nrows=None, nval=None, skiprows=0):
        """
        Reads and atom potential file
        :param file: filename/ location
        :param nval: number of values which will be read
        :param skiprows: number of rows which should be skipped in the beginning of the file
        :return: numpy array of potential
        """
        # read potential file generated by atom and return potentials as numpy array
        if nrows==None:
            nrows = np.ceil(nval/4)
        pot = pd.read_csv(file, nrows=nrows, delim_whitespace=True, skiprows=skiprows, header=None)
        pot = np.concatenate(pot.to_numpy())    # convert to numpy and concatenate to single array
        pot = pot[~np.isnan(pot)]               # Remove Nan element from array. These elements appear when the last
                                                # line in the potential file does not consist of 4 numbers
        return pot

    def add2potcarfourier(self, ca, nrad, radii, Vs, Cut, inicio, inicial, final):
        # based on the add2POTCAR-eng.f90 fortran script
        # this is quite slow 
        fourier = 0
        iniciovez = 0
        for i,r in enumerate(radii):
            if r <= 0:
                continue
                # nothting
            elif iniciovez == 0:
                fourier = fourier + (Vs[i]*np.sin(ca*r) + inicial*np.sin(ca* np.sin(ca*inicio)))*(r-inicio)/2.0
                iniciovez = 1
                continue
            elif r > Cut:
                fourier = fourier + (Vs[i]*np.sin(ca*r) + final*np.sin(ca*np.sin(ca*Cut)))*(Cut-r)/2.0
                break
            else:
                fourier = fourier + (Vs[i]*np.sin(ca*r) + Vs[i-1]*np.sin(ca*radii[i-1]))*(r-radii[i-1])/2.0
        return fourier

    def calc_nrows(self, potfile):
        with open(potfile) as pfile:
            for i,line in enumerate(pfile):
                if i ==0:
                    continue
                elif line[0] != ' ':
                    return i-1
